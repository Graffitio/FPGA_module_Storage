/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>          // 표준 입력/출력 함수
#include "platform.h"       // 플랫폼에 특화된 정의 및 초기화
#include "xil_printf.h"      // Xilinx printf 함수
#include "xparameters.h"     // 하드웨어 플랫폼의 매개변수 정의
#include "xgpio.h"           // 하드웨어용 일반 I/O 함수
#include "xintc.h"           // 인터럽트 컨트롤러 함수
#include "xil_exception.h"

//////////////////////// User Define ////////////////////////

#define SWITCH_ID XPAR_AXI_GPIO_SWITCH_DEVICE_ID  // 버튼용 GPIO 컨트롤러의 ID
#define SWITCH_CHANNEL 1                        // 버튼용 GPIO 채널
#define SWITCH_MASK 0b1111                      // 버튼에 대한 마스크, 하위 4비트만 사용

#define SWITCH_VEC_ID XPAR_INTC_0_GPIO_0_VEC_ID // VEC_ID는 이름을 바꿔도 처음 아이디 그대로 나온다.
#define INTC_ID XPAR_INTC_0_DEVICE_ID // Interrupt Controller의 디바이스 ID

////////////////////////////////////////////////////////////////////////////////

XGpio switch_device;                         // 버튼용 XGpio 드라이버의 인스턴스
XIntc intc;                              // 인터럽트 컨트롤러의 인스턴스

//////////// Function Prototype Declaration ////////////

void SWITCH_ISR(void *CallBackRef);

////////////////////////////////////////////////////////


int main()
{
    init_platform();                    // 플랫폼 초기화 (하드웨어 및 소프트웨어)

    printf("Start!!\n\r");              // 프로그램 시작을 나타내는 메시지 출력

    int switch_data = 0;                   // 버튼 데이터를 저장하는 변수
    XGpio_Config *cfg_ptr_switch_intc;     // 버튼 GPIO의 구성을 가리키는 포인터

    cfg_ptr_switch_intc = XGpio_LookupConfig(SWITCH_ID);  // 버튼 GPIO의 구성 조회
    XGpio_CfgInitialize(&switch_device, cfg_ptr_switch_intc, cfg_ptr_switch_intc->BaseAddress);  // 버튼 GPIO 초기화
    XGpio_SetDataDirection(&switch_device, SWITCH_CHANNEL, 1);  // 버튼 GPIO의 데이터 방향 설정

    //////////////////////// intc 초기화 ////////////////////////
    XIntc_Initialize(&intc, INTC_ID);
    XIntc_Connect(&intc, SWITCH_VEC_ID,
    		(XInterruptHandler)SWITCH_ISR, (void *)&switch_device);
    		// 인터럽트가 발생하면 이 아이디에 대해서 VEC_ID로 가고 함수의 주소를 찾아서 그 함수로 간다.

    //----------------------- intc Enable -----------------------//
    XIntc_Enable(&intc, SWITCH_VEC_ID); // Interrupt 활성화
    XIntc_Start(&intc, XIN_REAL_MODE);

    XGpio_InterruptEnable(&switch_device, SWITCH_CHANNEL); // 게별 인터럽트 활성화

    XGpio_InterruptGlobalEnable(&switch_device); // Global 인터럽트 활성화

    //-------------------- mblaze 인터럽트 할성화 --------------------//
    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
    		(Xil_ExceptionHandler)XIntc_InterruptHandler, &intc);
    Xil_ExceptionEnable();
    ////////////////////////////////////////////////////////

    while(1)
    {
        print("Hello World\n\r");      // 콘솔에 "Hello World" 출력
        switch_data = XGpio_DiscreteRead(&switch_device, SWITCH_CHANNEL);  // GPIO에서 버튼 데이터 읽기
        xil_printf("switch data : %x \n\r", switch_data);  // 버튼 데이터를 16진수 형식으로 출력
        MB_Sleep(1000);                 // 1000밀리초 동안 대기
    }

    cleanup_platform();                 // 종료 전에 리소스 정리 및 해제
    return 0;                           // 성공적인 실행을 나타내기 위해 0 반환
}



void SWITCH_ISR(void *CallBackRef)
{
	printf("switch Interrupt\n\r");
	XGpio *GpioPtr = (XGpio *)CallBackRef;
	// 이 CallBackRef가 누가 인터럽트를 발생시켰는지 알려준다.
	// 그래서 이 주소를 받아서 클리어해주는 것이 좋다.
	if(XGpio_DiscreteRead(GpioPtr, SWITCH_CHANNEL)) // 버튼을 누를 때만 동작하게 하고 싶다면?
//	if(XGpio_DiscreteRead(GpioPtr, SWITCH_CHANNEL) & 0b0010) // 왼쪽 버튼만 인터럽트로 사용하고 싶다면?
	{
		printf("Switch On\n\r");
	}
	else printf("Switch Off\n\r");
	XGpio_InterruptClear(&GpioPtr, SWITCH_CHANNEL);
	XIntc_Start(&intc, XIN_REAL_MODE);
	// 여기서는 Interrupt가 발생해도 Flag가 0으로 초기화되지 않는다.
	// 한 번 ISR이 동작하면, 계속 ISR이 동작해버림
	// 그래서 한 번 동작하고 꺼주는 함수를 추가해줘야 한다.

	return;
}
